pipeline {
    agent any

    stages {
        stage('Terraform Initialization') {
            steps {
                withCredentials(['AWS_Access']) {
                    dir('https://github.com/zinougeh/zino_sec_comp_take_home.git') {  // Adjust this path
                        sh """
                           terraform init -input=false \
                                          -backend-config="address=${env.YOUR_BACKEND_ADDRESS}" \
                                          -backend-config="access_key=${YOUR_ACCESS_KEY}" \
                                          -backend-config="secret_key=${YOUR_SECRET_KEY}" 
                        """
                    }
                }
            }
        }

        stage('AWS Deployment') {
            steps {
                withCredentials([ 'AWS_Access' ]) {
                    dir('path/to/your/terraform/code') {  // Adjust this path
                        sh "terraform apply -input=false -auto-approve"
                    }
                }
            }
        }

       stage('Configure EC2 with MicroK8s') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'sec_com_ass_key_pair', keyFileVariable: 'SSH_KEY')]) {
                    dir('zino_sec_comp_take_home/task1/microk8s') {
                        script {
                            def inventoryFile = """
                                [EC2]
                                ${EC2_PUBLIC_IP} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=${SSH_KEY}
                            """
                            writeFile file: 'temp_inventory.ini', text: inventoryFile
                        }
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            ansible-playbook ansible.yml -i temp_inventory.ini
                        '''
                    }
                }
            }
        }

        stage('Deploy SonarQube') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'sec_com_ass_key_pair', keyFileVariable: 'SSH_KEY')]) {
                    dir('zino_sec_comp_take_home/task1/sonar') {
                        sleep time: 60, unit: 'SECONDS'
                        sh """
                            scp -o StrictHostKeyChecking=no -i ${SSH_KEY} -r sonarqube ubuntu@${EC2_PUBLIC_IP}:/tmp
                            ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ubuntu@${EC2_PUBLIC_IP} 'sudo microk8s helm install sonar /tmp/sonarqube && sudo microk8s helm ls'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }

        success {
            echo "Deployment completed successfully."
        }

        failure {
            echo "Deployment failed! Please check the logs for more information."
        }

        cleanup {
            deleteDir()
        }
    }
}

