pipeline {
    agent any

    environment {
        SSH_DIR = "${env.WORKSPACE}/.ssh"
    }

    stages {
        stage('Initialization') {
            steps {
                deleteDir()
                sh 'git clone https://github.com/zinougeh/zino_sec_comp_take_home.git'
                sh 'terraform import aws_key_pair.deployer sec_com_ass_key_pair'
            }
        }

        stage('Setup SSH') {
            steps {
                script {
                    sh """
                        mkdir -p ${SSH_DIR}
                        if [ ! -f ${SSH_DIR}/id_rsa.pub ]; then
                            ssh-keygen -t rsa -b 4096 -f ${SSH_DIR}/id_rsa -N '' -m PEM
                        fi
                        chmod 600 ${SSH_DIR}/id_rsa
                    """
                    env.SSH_PUBLIC_KEY = sh(script: "cat ${SSH_DIR}/id_rsa.pub", returnStdout: true).trim()
                }
            }
        }

        stage('Deploy on AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Access']]) {
                    dir('zino_sec_comp_take_home/task1/terraform') {
                        sh 'terraform init'
                        sh "terraform apply -var 'ssh_public_key=${SSH_PUBLIC_KEY}' -auto-approve"
                        sleep time: 300, unit: 'SECONDS'
                        script {
                            env.EC2_PUBLIC_IP = sh(script: 'terraform output instance_public_ip', returnStdout: true).trim()
                        }
                    }
                }
            }
        }

        stage('Configure EC2 with MicroK8s') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'sec_com_ass_key_pair', keyFileVariable: 'SSH_KEY')]) {
                    dir('zino_sec_comp_take_home/task1/microk8s') {
                        script {
                            def inventoryFile = """
                                [EC2]
                                ${EC2_PUBLIC_IP} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=${SSH_KEY}
                            """
                            writeFile file: 'temp_inventory.ini', text: inventoryFile
                        }
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            ansible-playbook ansible.yml -i temp_inventory.ini
                        '''
                    }
                }
            }
        }

        stage('Deploy SonarQube') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'sec_com_ass_key_pair', keyFileVariable: 'SSH_KEY')]) {
                    dir('zino_sec_comp_take_home/task1/sonar') {
                        sleep time: 60, unit: 'SECONDS'
                        sh """
                            scp -o StrictHostKeyChecking=no -i ${SSH_KEY} -r sonarqube ubuntu@${EC2_PUBLIC_IP}:/tmp
                            ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ubuntu@${EC2_PUBLIC_IP} 'sudo microk8s helm install sonar /tmp/sonarqube && sudo microk8s helm ls'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }

        success {
            echo "Deployment completed successfully."
        }

        failure {
            echo "Deployment failed! Please check the logs for more information."
        }

        cleanup {
            deleteDir()
        }
    }
}
