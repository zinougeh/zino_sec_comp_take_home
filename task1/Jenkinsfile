pipeline {
    agent any

    environment {
        WORKSPACE_DIR = "${env.WORKSPACE}" // Use Jenkins workspace
    }

    stages {
        stage('Initialization') {
            steps {
                // Clean Jenkins workspace
                cleanWs()
                
                // Clone the repository
                sh 'git clone https://github.com/zinougeh/zino_sec_comp_take_home.git'
            }
        }

        stage('Setup SSH') {
            steps {
                script {
                    def sshDir = "${env.WORKSPACE_DIR}/.ssh"
                    if (!fileExists(sshDir)) {
                        sh "mkdir -p ${sshDir}"
                    }
                    if(!fileExists("${sshDir}/id_rsa.pub")) {
                        sh "ssh-keygen -t rsa -b 4096 -f ${sshDir}/id_rsa -N ''"
                        env.SSH_PUBLIC_KEY = sh(script: "cat ${sshDir}/id_rsa.pub", returnStdout: true).trim()
                    } else {
                        env.SSH_PUBLIC_KEY = sh(script: "cat ${sshDir}/id_rsa.pub", returnStdout: true).trim()
                    }
                }
            }
        }

        stage('Deploy on AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Access']]) {
                    dir('zino_sec_comp_take_home/task1/terraform') {
                        sh 'terraform init'
                        sh "terraform apply -var 'ssh_public_key=${env.SSH_PUBLIC_KEY}' -auto-approve"
                        sleep time: 200, unit: 'SECONDS'
                        script {
                            def EC2_PUBLIC_IP = sh(script: 'terraform output instance_public_ip', returnStdout: true).trim()
                            env.EC2_PUBLIC_IP = EC2_PUBLIC_IP
                        }
                    }
                }
            }
        }

        stage('Configure EC2 with MicroK8s') {
    steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Access']]) {
            dir('zino_sec_comp_take_home/task1/microk8s/') {
                script {
                    def inventoryFile = """
                        [EC2]
                        ${env.EC2_PUBLIC_IP}
                    """
                    writeFile file: 'temp_inventory.ini', text: inventoryFile
                    sh "chmod 400 ${env.WORKSPACE_DIR}/.ssh/id_rsa"
                }
                sshagent(credentials: ['sec_com_ass_key_pair']) {
                    sh 'cat temp_inventory.ini'
                    sh 'export ANSIBLE_HOST_KEY_CHECKING=False'
                    ansiblePlaybook(
                        credentialsId: 'sec_com_ass_key_pair',
                        inventory: 'temp_inventory.ini',
                        playbook: 'ansible.yml',
                        hostKeyChecking: 'false'
                    )
                }
            }
        }
    }
}

        stage('Deploy SonarQube') {
            steps {
                dir('zino_sec_comp_take_home/task1/sonar/') {
                    sleep time: 60, unit: 'SECONDS'
                    script {
                        sshagent(credentials: ['sec_com_ass_key_pair']) {
                            sh "scp -o StrictHostKeyChecking=no -r sonarqube ubuntu@${env.EC2_PUBLIC_IP}:/tmp"
                            sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.EC2_PUBLIC_IP} 'sudo microk8s helm install sonar /tmp/sonarqube && sudo microk8s helm ls'"
                        }
                    }
                }
            }
        }
    }
}
