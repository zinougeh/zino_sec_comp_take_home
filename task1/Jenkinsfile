pipeline {
    agent any

    environment {
        WORKSPACE_DIR = "${env.WORKSPACE}" // Use Jenkins workspace programmatically
    }

    stages {
        stage('Initialization') {
            steps {
                deleteDir() // Clean Jenkins workspace
                checkout scm // Clone the repository
            }
        }

        stage('Setup SSH') {
            steps {
                script {
                    def sshDir = "${WORKSPACE_DIR}/.ssh"
                    sh """
                        mkdir -p ${sshDir}
                        if [ ! -f ${sshDir}/id_rsa.pub ]; then
                            ssh-keygen -t rsa -b 4096 -f ${sshDir}/id_rsa -N '' -m PEM
                        fi
                    """
                    env.SSH_PUBLIC_KEY = sh(script: "cat ${sshDir}/id_rsa.pub", returnStdout: true).trim()
                }
            }
        }

        stage('Deploy on AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Access']]) {
                    dir('zino_sec_comp_take_home/task1/terraform') {
                        sh 'terraform init'
                        sh "terraform apply -var 'ssh_public_key=${SSH_PUBLIC_KEY}' -auto-approve"
                        script {
                            env.EC2_PUBLIC_IP = sh(script: 'terraform output instance_public_ip', returnStdout: true).trim()
                        }
                    }
                }
            }
        }

        stage('Configure EC2 with MicroK8s') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'sec_com_ass_key_pair', keyFileVariable: 'SSH_KEY')]) {
                    dir('zino_sec_comp_take_home/task1/microk8s/') {
                        script {
                            def inventoryFile = """
                                [EC2]
                                ${EC2_PUBLIC_IP}
                            """
                            writeFile file: 'temp_inventory.ini', text: inventoryFile
                        }
                        sh '''
                            export ANSIBLE_HOST_KEY_CHECKING=False
                            ansible-playbook ansible.yml -i temp_inventory.ini --private-key=${SSH_KEY} -u ubuntu
                        '''
                    }
                }
            }
        }

        stage('Deploy SonarQube') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'sec_com_ass_key_pair', keyFileVariable: 'SSH_KEY')]) {
                    dir('zino_sec_comp_take_home/task1/sonar/') {
                        sh """
                            scp -o StrictHostKeyChecking=no -r sonarqube ubuntu@${EC2_PUBLIC_IP}:/tmp
                            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_PUBLIC_IP} 'sudo microk8s helm install sonar /tmp/sonarqube && sudo microk8s helm ls'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }

        success {
            echo "Deployment completed successfully."
        }

        failure {
            echo "Deployment failed! Please check the logs for more information."
            // You can add more actions here like sending notifications (emails, Slack messages, etc.)
        }

        cleanup {
            deleteDir()  // Clean Jenkins workspace at the end of the run
        }
    }
}

