pipeline {
    agent any

    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
                sh 'git clone https://github.com/zinougeh/zino_sec_comp_take_home'
            }
        }
        
        stage('AWS Tasks') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                                  credentialsId: 'AWS_Access']]) {

                    // Terraform stage
                    dir('task1/terraform') {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                        sleep time: 200, unit: 'SECONDS'
                        script {
                            def EC2_PUBLIC_IP = sh(script: 'terraform output public_ip', returnStdout: true).trim()
                            env.EC2_PUBLIC_IP = EC2_PUBLIC_IP
                            println(EC2_PUBLIC_IP)
                        }
                    }
                    
                    // Ansible stage
                    dir('task1/microk8s/') {
                        def inventoryFile = """
                            [EC2]
                            ${env.EC2_PUBLIC_IP}
                        """

                        writeFile file: 'temp_inventory.ini', text: inventoryFile

                        sh 'cat temp_inventory.ini'
                        sh 'ls'
                        sh 'export ANSIBLE_HOST_KEY_CHECKING=False'
                        ansiblePlaybook(
                            credentialsId: 'jenkins',
                            inventory: 'temp_inventory.ini',
                            playbook: 'ansible.yml',
                            hostKeyChecking: 'false'
                        )
                    }

                    // SonarQube Helm stage
                    dir('task1/sonar/') {
                        sleep time: 60, unit: 'SECONDS'
                        script {
                            sshagent(credentials: ['jenkins']) {
                                sh "scp -o StrictHostKeyChecking=no -r sonarqube ubuntu@${env.EC2_PUBLIC_IP}:/tmp"
                                sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.EC2_PUBLIC_IP} 'sudo microk8s helm install sonar /tmp/sonarqube && sudo microk8s helm ls'"
                            }
                        }
                    }
                } // End of withCredentials block
            }
        }
    }
}

